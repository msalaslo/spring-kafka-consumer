spring:
   kafka:
      consumer:
         auto-offset-reset: earliest
         group-id: java.consumer.installation.test.3
         key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
         value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
         security:
            protocol: SASL_PLAINTEXT
         #protocol: PLAINTEXT
      #bootstrap-servers: localhost:9092
      bootstrap-servers: ef1kafkabrk01v:9092
      properties:
         schema: 
            registry:
               url: http://ef1kafkareg01v:8081
               #url: http://epi1regmoaii01v:8081
               #url: http://localhost:8081
         sasl:
            mechanism: PLAIN
            jaas:
               #config: org.apache.kafka.common.security.plain.PlainLoginModule required username='${CONSUMER_USER}'   password='${CONSUMER_PASSWORD}';
               config: org.apache.kafka.common.security.plain.PlainLoginModule required username='client' password='client-secret';
      template: 
         default-topic: default-topic
kafka:
   topicImages: sbn.installations-esp.bulk
         # sbn.alarmlog-esp.bulk

management:
   server:
     port: 8080
   endpoints:
      web:
         exposure:
            include: '*'
         base-path: /actuator
   metrics:
      tags:
         host: milocal
         application: spring-kafka-consumer
      export:
         elastic:
            # You will probably want disable Elastic publishing in a local development profile.
            enabled: true
            # The interval at which metrics are sent to Elastic. The default is 1 minute.
            step: 10s
            host: http://localhost:9200
            userName: elastic
            password: changeme 
            # The index to store metrics in, defaults to "micrometer-metrics"
            index: kafka-micrometer-metrics
            auto-create-index: false


      distribution:
         percentiles-histogram:
            http:
               server:
                  requests: true
         sla:
          http: 
             server:
                requests: 100ms, 400ms, 500ms, 2000ms



